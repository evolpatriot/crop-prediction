import streamlit as st
import pandas as pd
import numpy as np
import os
import pickle
import warnings
from PIL import Image

st.set_page_config(page_title="Crop Recommender", page_icon="üåø", layout='centered', initial_sidebar_state="collapsed")

def load_model(modelfile):
	loaded_model = pickle.load(open(modelfile, 'rb'))
	return loaded_model

def main():
    html_temp = """
    <div>
    <h1 style="color:MEDIUMSEAGREEN;text-align:left;">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã üë®‚Äçüåæ</h1>
    </div>
    """
    st.markdown(html_temp, unsafe_allow_html=True)

    N = st.number_input("–ê–∑–æ—Ç", 1,10000)
    P = st.number_input("–§–æ—Å—Ñ–æ—Ä", 1,10000)
    K = st.number_input("–ö–∞–ª–∏–π", 1,10000)
    temp = st.number_input("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",0.0,100000.0)
    humidity = st.number_input("–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤ %", 0.0,100000.0)
    rainfall = st.number_input("–û—Å–∞–¥–∫–∏ –≤ –º–º",0.0,100000.0)
    ph = st.number_input("Ph", 0.0,100000.0)
    #ph = st.slider('Ph',0.0,10.0,6.7)
    norm = st.checkbox("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", value=True, disabled=True)
    algo = st.selectbox('–ê–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏',('GaussianNB', 'RandomForest'))

    feature_list = [N, P, K, temp, humidity, ph, rainfall]
    single_pred = np.array(feature_list).reshape(1,-1)

    if algo == 'GaussianNB':
        filename = 'gauss.pkl'
    elif algo == 'RandomForest':
        filename = 'rf.pkl'

    if st.button('–ü—Ä–æ–≥–Ω–æ–∑'):
        loaded_model = load_model(filename)
        prediction = loaded_model.predict(single_pred)
        st.write('''
		## –†–µ–∑—É–ª—å—Ç–∞—Ç üîç
		''')
        st.success(f"{prediction.item().title()} —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ–ª—è.")
      #code for html ‚òòÔ∏è üåæ üå≥ üë®‚Äçüåæ  üçÉ

        html_temp2 = """
        <div>
        <h2 style="color:MEDIUMSEAGREEN;text-align:left;">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞</h2>
        </div>
        """
        st.markdown(html_temp2, unsafe_allow_html=True)

        image1 = Image.open('pairplot.png')
        st.image(image1, caption='–ü–∞—Ä–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –º–æ–¥–µ–ª–∏')
        image2 = Image.open('corr_matrix.png')
        st.image(image2, caption='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞')
        if algo == 'GaussianNB':
    	    image3 = Image.open('gauss_conf_matrix.png')
        elif algo == 'RandomForest':
    	    image3 = Image.open('rf_conf_matrix.png')
        st.image(image3, caption='–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫')
        if algo == 'RandomForest':
            image4 = Image.open('rf_feature_importance.png')
            st.image(image4, caption='–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')


    hide_menu_style = """
    <style>
    #MainMenu {visibility: hidden;}
    </style>
    """


hide_menu_style = """
        <style>
        #MainMenu {visibility: hidden;}
        </style>
        """
st.markdown(hide_menu_style, unsafe_allow_html=True)

if __name__ == '__main__':
	main()
